<?php

namespace common\models;

use Yii;
use common\models\Category;
use common\models\PostingTags;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "posting".
 *
 * @property integer $id
 * @property string $title
 * @property string $subtitle
 * @property string $content
 * @property string $category
 * @property integer $status
 * @property integer $important
 * @property string $tag
 * @property string $img
 */
class Posting extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    const STATUS_ALLOW = 1;
    const STATUS_DISALLOW = 0;


    public static function tableName()
    {
        return 'posting';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['content'], 'string'],
            [['status', 'important'], 'integer'],
            [['title', 'subtitle',  'tag', 'img','tmb'], 'string', 'max' => 255],
            [['img'], 'file', 'extensions' => 'png, jpg'],
            [['date'], 'date', 'format'=>'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['category'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Category::className(), 'targetAttribute' => ['category' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок',
            'subtitle' => 'Подзаголовок',
            'content' => 'Содержание',
            'category' => 'Категория',
            'status' => 'Status',
            'important' => 'Important',
            'tag' => 'Tag',
            'img' => 'Img',
            'date' => 'Date',
            'tmb'=>'Миниатюра',
            'id_user'=>'Пользователь'
        ];
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCategory0()
    {
        return $this->hasOne(Category::className(), ['id' => 'category']);
    }
    public function getCategory()
    {
         $category = (new \yii\db\Query())
        ->select(['u.category_name','u.category_id'])
        ->from('category u')
        ->innerJoin('posting d', 'u.category_id = d.category')
        ->groupBy('u.category_name')
        ->orderBy('u.id ASC')
        ->all();
        return $category;
    }
    public function saveImage($filename)
    {
        $this->img = $filename;
        return $this->save(false);
    }
    public function getImage()
    {
        return ($this->img) ? '/backend/web/uploads/' . $this->img : '/no-image.png';
    }
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->img);
    }
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if($category != null)
        {
            $this->link('categories', $category);
            return true;
        }
    }
    public function saveTags($tags)

    {

        if (is_array($tags))
        {
            $this->clearCurrentTags();

            foreach($tags as $tag_id)
            {
                $tag = Tags::findOne($tag_id);

                $this->link('tags', $tag);
            }
        }
    }
    public function clearCurrentTags()
    {
        PostingTags::deleteAll(['posting_id'=>$this->id]);
    }
    public function isAllowed()
    {
        return $this->status;
    }
    public function allow()
    {
        $this->status = self::STATUS_ALLOW;
        return $this->save(false);
    }

    public function disallow()
    {
        $this->status = self::STATUS_DISALLOW;
        return $this->save(false);
    }

    /**
     * @inheritdoc
     * @return PostsQuery the active qupublic function getComments()
    {
    return $this->hasMany(Comments::className(), ['id_post' => 'id']);
    }ery used by this AR class.
     */

    public function getComments()
    {
        return $this->hasMany(Comments::className(), ['id_post' => 'id']);
    }
    public function getTags()
    {
        return $this->hasMany(Tags::className(), ['id' => 'tags_id'])->viaTable('posting_tags',['posting_id'=>'id']);
    }
    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id'=>'id_user']);
    }
    public function getCategories()
    {
        return $this->hasOne(Category::className(), ['id' => 'category']);
    }
    public function getSelectedTags()
    {
        $selectedIds = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedIds, 'id');
    }

}
